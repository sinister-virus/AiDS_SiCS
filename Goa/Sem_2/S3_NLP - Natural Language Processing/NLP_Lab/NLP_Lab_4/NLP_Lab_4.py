# -*- coding: utf-8 -*-
"""NLP_Lab_4

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uae7-fujSVbCwR7K76bIfABXMIPttYQU
"""

class CYKParser:
    def __init__(self):
        """
        Initialize CYK Parser with comprehensive grammar rules
        """
        self.grammar = {
            'S': [['NP', 'VP'], ['VP']],
            'NP': [['Det', 'N'], ['Proper'], ['N'], ['Det', 'Adj', 'N']],
            'VP': [['V'], ['V', 'NP'], ['V', 'Adv'], ['V', 'NP', 'Adv']],
            'Det': [['the'], ['a'], ['an'], ['this'], ['that']],
            'N': [['dog'], ['cat'], ['mouse'], ['man'], ['ball'], ['book'], ['tree'], ['house']],
            'Proper': [['John'], ['Mary'], ['Tom'], ['Sarah'], ['Emma'], ['David'], ['Anna']],
            'V': [['chased'], ['saw'], ['liked'], ['ran'], ['jumped'], ['read'], ['wrote'], ['played']],
            'Adv': [['quickly'], ['slowly'], ['carefully'], ['happily'], ['quietly']],
            'Adj': [['big'], ['small'], ['red'], ['blue'], ['happy'], ['sad']]
        }

    def parse(self, sentence):
        """
        CYK Parsing Algorithm Implementation
        """
        if isinstance(sentence, str):
            sentence = sentence.split()
        n = len(sentence)
        table = [[set() for _ in range(n-j)] for j in range(n)]
        derivation_table = [[[] for _ in range(n-j)] for j in range(n)]
        for i, word in enumerate(sentence):
            for nt, productions in self.grammar.items():
                for prod in productions:
                    if len(prod) == 1 and prod[0] == word:
                        table[0][i].add(nt)
                        derivation_table[0][i].append((nt, [word]))
        for j in range(1, n):
            for i in range(n-j):
                for k in range(j):
                    for nt, productions in self.grammar.items():
                        for prod in productions:
                            if len(prod) == 2:
                                left, right = prod
                                if (left in table[j-k-1][i] and right in table[k][i+j-k]):
                                    table[j][i].add(nt)
                                    derivation_path = [(left, table[j-k-1][i]), (right, table[k][i+j-k])]
                                    derivation_table[j][i].append((nt, derivation_path))
        self._print_parse_table(table, sentence)
        is_valid = 'S' in table[n-1][0]
        return is_valid, table, derivation_table

    def _print_parse_table(self, table, sentence):
        """
        Visualize the CYK parsing table
        """
        print("\n--- CYK Parsing Table ---")
        print("Input Sentence:", " ".join(sentence))
        for i, row in enumerate(table):
            print(f"\nDiagonal {i}:")
            for j, cell in enumerate(row):
                print(f"  Cell [{i},{j}]: {cell}")

    def parse_manual_sentence(self, sentence):
        """
        Parse a manually provided sentence and display results
        """
        if not sentence.strip():
            print("No sentence provided.")
            return
        print(f"Sentence: '{sentence}'")
        print(f"\n=== Parsing Sentence ===")
        is_valid, table, _ = self.parse(sentence)
        print(f"\nSentence: '{sentence}'")
        print(f"Valid Parse: {is_valid}")

def main(sentence):
    """
    Parse a single sentence using the CYK Parser
    """
    parser = CYKParser()
    parser.parse_manual_sentence(sentence)

def test_sen(z=None):
    """
    Test a sentence from test_cases, auto-incrementing the index each call
    """
    # Initialize counter as function attribute if not set
    if not hasattr(test_sen, 'counter'):
        test_sen.counter = 0

    # Use provided z if given, otherwise use counter
    index = z if z is not None else test_sen.counter

    if index < len(test_cases):
        print(f"Test Case {index}")
        main(test_cases[index])
        # Auto-increment counter for next call
        test_sen.counter = index + 1
    else:
        print("No more test cases to process.")

test_cases = [
    "the dog chased the cat",
    "John saw a mouse",
    "Mary liked the dog",
    "Tom ran quickly",
    "a cat chased",
    "the mouse John",
    "the big dog ran quickly",
    "John wrote a book carefully"
]

test_sen()

test_sen()

test_sen()

test_sen()

test_sen()

test_sen()

test_sen()

test_sen()

test_sen()